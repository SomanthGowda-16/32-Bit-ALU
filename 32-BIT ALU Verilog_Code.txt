ALU32BIT
module ALU32 (
    input  [31:0] A,
    input  [31:0] B,
    input  [2:0]  ALU_Sel,
    input         clk,
    input         rst,        // Active-high synchronous reset
    output reg [31:0] ALU_Out,
    output reg Zero
);

reg [31:0] result;

always @(*) begin
    case (ALU_Sel)
        3'b000: result = A & B;
        3'b001: result = A | B;
        3'b010: result = A + B;
        3'b011: result = A - B;
        3'b100: result = A ^ B;
        3'b101: result = ~(A | B);
        3'b110: result = A << B[4:0];
        3'b111: result = A >> B[4:0];
        default: result = 32'b0;
    endcase
end

always @(posedge clk) begin
    if (rst) begin
        ALU_Out <= 32'b0;
        Zero <= 1'b0;
    end else begin
        ALU_Out <= result;
        Zero <= (result == 32'b0);
    end
end

endmodule